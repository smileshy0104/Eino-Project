services:
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - /Users/yuyansong/AiProject/Milvus-Config/etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ['CMD', 'etcdctl', 'endpoint', 'health']
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - '9001:9001'
      - '9000:9000'
    volumes:
      - /Users/yuyansong/AiProject/Milvus-Config/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.10
    command: ['milvus', 'run', 'standalone']
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - /Users/yuyansong/AiProject/Milvus-Config/milvus:/var/lib/milvus
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9091/healthz']
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - '19530:19530'
      - '9091:9091'
    depends_on:
      - 'etcd'
      - 'minio'
  # 这是新增的 Attu 服务哦！
  attu:
    container_name: milvus-attu
    image: zilliz/attu:v2.5
    ports:
      - '8001:3000' # 把本地的 8000 端口映射到容器的 3000 端口 (Attu 默认端口)
    environment:
      # MILVUS_URL 指向 Docker 网络里的 Milvus standalone 服务
      MILVUS_URL: standalone:19530
    depends_on:
      - standalone # 确保 Milvus 启动后再启动 Attu
